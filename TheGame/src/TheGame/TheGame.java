package TheGame;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import java.io.*;
import javax.xml.parsers.*;   //imports the library to be able to read(parse) xml files
import org.w3c.dom.*;   //allows for XML processing
import org.xml.sax.SAXException;
import java.lang.Math;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;





public class TheGame extends javax.swing.JFrame {
    ImageIcon splashscreen = new ImageIcon("src/TheGame/splashscreen.png"); //Creates image path and stores it in splashscreen
    int startOption = JOptionPane.showConfirmDialog(null, null, "Chemistry Jeopardy", JOptionPane.OK_CANCEL_OPTION, JOptionPane.NO_OPTION, splashscreen); //Creates the opening screen with previous image
    boolean questionSelection = false; //Sets the questionSelection to false to indicate user cannot select questions now 
    boolean gameStart = false; //Sets the gameStart to false to indicate the number of teams has not beens selected yet 
    ArrayList<Integer> teams = new ArrayList<Integer>(); //Sets up arraylist tracking team scores
    ArrayList<String> teamNumbers = new ArrayList<String>(); //Sets up arraylist tracking team numbers
    int questionsLeft = 9; //Sets up variable tracking number of questions left 
    
  
    public TheGame() {
        if (startOption == 0){ //If the user clicked "OK" on the start screen, the game commences
            initComponents();
        }else{ //If the user did not click "OK", the window closes and the game does not start
            System.exit(0); //Closes the system and open window
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        answerBox = new javax.swing.JTextField();
        hiddenAnswerBox = new javax.swing.JTextField();
        questionBox = new javax.swing.JTextField();
        currentTeam = new javax.swing.JTextField();
        exitGameButton = new javax.swing.JButton();
        endGameButton = new javax.swing.JButton();
        h100 = new javax.swing.JButton();
        h200 = new javax.swing.JButton();
        h300 = new javax.swing.JButton();
        c100 = new javax.swing.JButton();
        c200 = new javax.swing.JButton();
        c300 = new javax.swing.JButton();
        w100 = new javax.swing.JButton();
        w200 = new javax.swing.JButton();
        w300 = new javax.swing.JButton();
        confirmButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        scoreBox = new javax.swing.JTextArea();
        gameBoard = new javax.swing.JLabel();
        questionAnswerBoard1 = new javax.swing.JLabel();
        teamsBoard = new javax.swing.JLabel();
        questionAnswerBoard = new javax.swing.JLabel();
        hiddenPointsBox = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setForeground(java.awt.Color.white);

        jPanel2.setLayout(null);

        answerBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerBoxActionPerformed(evt);
            }
        });
        jPanel2.add(answerBox);
        answerBox.setBounds(210, 530, 240, 40);
        jPanel2.add(hiddenAnswerBox);
        hiddenAnswerBox.setBounds(734, 570, 0, 0);

        questionBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        questionBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        questionBox.setText("Before we begin, how many teams are playing? ");
        questionBox.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        questionBox.setEnabled(false);
        jPanel2.add(questionBox);
        questionBox.setBounds(210, 470, 480, 40);

        currentTeam.setFont(new java.awt.Font("Trebuchet MS", 0, 90)); // NOI18N
        currentTeam.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        currentTeam.setText("0");
        currentTeam.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        currentTeam.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        currentTeam.setEnabled(false);
        currentTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentTeamActionPerformed(evt);
            }
        });
        jPanel2.add(currentTeam);
        currentTeam.setBounds(760, 150, 200, 120);

        exitGameButton.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        exitGameButton.setText("EXIT GAME");
        exitGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitGameButtonActionPerformed(evt);
            }
        });
        jPanel2.add(exitGameButton);
        exitGameButton.setBounds(800, 550, 130, 40);

        endGameButton.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        endGameButton.setText("END GAME");
        endGameButton.setEnabled(false);
        endGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endGameButtonActionPerformed(evt);
            }
        });
        jPanel2.add(endGameButton);
        endGameButton.setBounds(550, 530, 140, 40);

        h100.setFont(new java.awt.Font("SimSun-ExtB", 0, 48)); // NOI18N
        h100.setText("100");
        h100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                h100ActionPerformed(evt);
            }
        });
        jPanel2.add(h100);
        h100.setBounds(510, 190, 150, 60);

        h200.setFont(new java.awt.Font("SimSun-ExtB", 0, 48)); // NOI18N
        h200.setText("200");
        h200.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                h200ActionPerformed(evt);
            }
        });
        jPanel2.add(h200);
        h200.setBounds(510, 270, 150, 60);

        h300.setFont(new java.awt.Font("SimSun-ExtB", 0, 48)); // NOI18N
        h300.setText("300");
        h300.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                h300ActionPerformed(evt);
            }
        });
        jPanel2.add(h300);
        h300.setBounds(510, 360, 150, 60);

        c100.setFont(new java.awt.Font("SimSun-ExtB", 0, 48)); // NOI18N
        c100.setText("100");
        c100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c100ActionPerformed(evt);
            }
        });
        jPanel2.add(c100);
        c100.setBounds(300, 190, 150, 60);

        c200.setFont(new java.awt.Font("SimSun-ExtB", 0, 48)); // NOI18N
        c200.setText("200");
        c200.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c200ActionPerformed(evt);
            }
        });
        jPanel2.add(c200);
        c200.setBounds(300, 270, 150, 60);

        c300.setFont(new java.awt.Font("SimSun-ExtB", 0, 48)); // NOI18N
        c300.setText("300");
        c300.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c300ActionPerformed(evt);
            }
        });
        jPanel2.add(c300);
        c300.setBounds(300, 360, 150, 60);

        w100.setFont(new java.awt.Font("SimSun-ExtB", 0, 48)); // NOI18N
        w100.setText("100");
        w100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                w100ActionPerformed(evt);
            }
        });
        jPanel2.add(w100);
        w100.setBounds(100, 190, 150, 60);

        w200.setFont(new java.awt.Font("SimSun-ExtB", 0, 48)); // NOI18N
        w200.setText("200");
        w200.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                w200ActionPerformed(evt);
            }
        });
        jPanel2.add(w200);
        w200.setBounds(100, 270, 150, 60);

        w300.setFont(new java.awt.Font("SimSun-ExtB", 0, 48)); // NOI18N
        w300.setText("300");
        w300.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                w300ActionPerformed(evt);
            }
        });
        jPanel2.add(w300);
        w300.setBounds(100, 360, 150, 60);

        confirmButton.setText("CONFIRM");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });
        jPanel2.add(confirmButton);
        confirmButton.setBounds(453, 530, 90, 40);

        scoreBox.setColumns(20);
        scoreBox.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        scoreBox.setRows(5);
        scoreBox.setText(" ");
        scoreBox.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        scoreBox.setEnabled(false);
        jScrollPane1.setViewportView(scoreBox);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(800, 360, 130, 180);

        gameBoard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TheGame/JEOPARDY.png"))); // NOI18N
        gameBoard.setText("jLabel1");
        jPanel2.add(gameBoard);
        gameBoard.setBounds(30, 10, 680, 440);

        questionAnswerBoard1.setForeground(new java.awt.Color(240, 240, 240));
        questionAnswerBoard1.setText("Capitalize the first letter and do not leave a space at the end [Check User Guide for Answer Key]");
        jPanel2.add(questionAnswerBoard1);
        questionAnswerBoard1.setBounds(150, 510, 650, 140);

        teamsBoard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TheGame/TEAM PANEL.png"))); // NOI18N
        jPanel2.add(teamsBoard);
        teamsBoard.setBounds(710, 10, 300, 670);

        questionAnswerBoard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TheGame/QUESTION ANSWER DIALOG.png"))); // NOI18N
        questionAnswerBoard.setText("jLabel1");
        jPanel2.add(questionAnswerBoard);
        questionAnswerBoard.setBounds(30, 400, 680, 250);

        hiddenPointsBox.setEnabled(false);
        jPanel2.add(hiddenPointsBox);
        hiddenPointsBox.setBounds(994, 590, 0, 0);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1040, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void currentTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentTeamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currentTeamActionPerformed

       
    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
    if (gameStart == true){ //If game start is true, the following code executes 
        if (questionSelection == false){ //If questionSelection is false, the following code executes. 
            checkAnswer(); //Execute method checkAnswer()
            displayTeams(); //Execute method displayTeams()
            nextTeam(); //Execute method nextTeam()
            questionSelection = true; //Set questionSelection to true 
            if (questionsLeft == 0){ //If no questions are left, the following code executes 
                exitGameButton.setEnabled(false); //Button is disabled so it cannot be clicked anymore
                endGameButton.setEnabled(true); //Button is disabled so it cannot be clicked anymore
                confirmButton.setEnabled(false); //Button is disabled so it cannot be clicked anymore
                answerBox.setText("GAME OVER! CLICK 'END GAME'!"); //Answer box gets the game over text 
            }
        }else{ //Else, if the questionSelection is true, the following code executes 
            questionBox.setText("Select a question first!"); //Question box text prompts user to select a question first 
            answerBox.setText(""); //Answer box user input is cleared for good measure 
        }       
    }else{ //Else, if gameStart is not true, the following code executes 
        int numberOfTeams = Integer.parseInt(answerBox.getText()); //The number of teams is the String in the answerBox field converted to Integer
        if (numberOfTeams > 0){ //If this number is over 0, the following code executes 
            questionBox.setText("Great! Team 1 select a question to start!"); //Question box is set to display this message
            answerBox.setText(""); //Answer box is cleared with an empty string 
            currentTeam.setText("1"); //Current team box is set with Team 1 to indicate the current team's turn 
            gameStart = true; //gameStart is set to true 
            questionSelection = true; //Question selection is set to 2 
            for (int i = 0; i < numberOfTeams; i++) { //For loop that repeats up until the amount of teams playing 
                teams.add(0); //Adds the score of zero to all the teams in the arraylist 
                String teamNumber = Integer.toString(i + 1); //Determines the respective team number by adding 1 to the i value 
                teamNumbers.add(teamNumber); //Adds the team number to a seperate arraylist to correlate with the score arraylist 
            }
            displayTeams(); //DisplayTeams() method is executed 
        }else{ //Else, if the number the user inputted is not above 0, the following code executes 
            answerBox.setText("Enter a value over 0!"); //answer box displays the prompt to re enter 
        } 
    }
    
    }//GEN-LAST:event_confirmButtonActionPerformed

    public void checkAnswer(){ //Method checkAnswer
        String correctAnswer = hiddenAnswerBox.getText(); //Gets the String stored in hidden answer box and stores it in correctAnswer 
        if(answerBox.getText().equals(correctAnswer)){ //If the text within the answer box is equal to the String of the correctAnswer the following code executes 
            int index = Integer.parseInt(currentTeam.getText()) - 1; //Index of current team to give points to is the current Team display - 1 to accurately match the arraylist that starts at 0
            teams.set(index, Integer.parseInt(hiddenPointsBox.getText()) + teams.get(index)); //Adds the points to the specific team referenced by its index, with the number of points being taken from a hidden Points box and converted to Integer
            questionBox.setText("CORRECT! GREAT JOB!"); //Question box text is set to a congratulatory message 
            answerBox.setText(""); //Answer box is cleared for usage with a blank string 
        }else{ //else, if the answerBox text does not equal the correct answer, the following code executes: 
            questionBox.setText("INCORRECT! ANSWER WAS " + hiddenAnswerBox.getText() + "!"); //Question box text is set to an incorrect message
            answerBox.setText(""); //Answer box is cleared for usage with a blank string 
        }
    }
    
    public void nextTeam(){
        int previousTeam = Integer.parseInt(currentTeam.getText()); //The current team text is converted to an integer and stored in a variable   
        if (previousTeam < teams.size()){ //If the previous team variable is less than the size of the teams arraylist, the following code executes: 
            String currentTeamOutput = Integer.toString(previousTeam + 1); //previous team increases by 1 and is converted to a string to be displayed on the currentTeam output 
            currentTeam.setText(currentTeamOutput); //Current team output variable is set in the current Team display 
        }else{ //Else, if the previous team variable is not less than the numbers of team, the following code executes. 
            currentTeam.setText("1"); //The current team is reset back to number 1
        }
    }
    
    public void displayTeams(){
        scoreBox.setText(""); //Clears the scorebox with a blank string  
        for(int i = 0; i < teams.size(); i++){ //Loop that repeats for every item in the teams arraylist 
            scoreBox.append("Team " + (i + 1) + ": " + teams.get(i) + "\n"); //Appends a combination of strings and numbers as well as the score from the team arraylist to be outputted in the scoreBox.
        }
    }
    

    private void w300ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_w300ActionPerformed
    if(questionSelection == true){ //If the questionSelection is true, the following code executes: 
        questionSelection = false; //Question selection is set to false 
        questionsLeft = questionsLeft - 1; //Questions left is subtracted by 1 
        w300.setEnabled(false); //The current button is set to disabled to not be clicked again 
        hiddenPointsBox.setText("300"); //The hidden points box is set to 300, which is the value of the button. 
        int index = (int)(Math.random()* 4); //Integer index is chosen a random number between 1 and 4 
        
        try { //Try the following code
            String filepath = "questions.xml"; //Sets the filepath to questions.xml 
            
            //Uses document methods to open the document 
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);
            
           
            Node node = doc.getElementsByTagName("w300").item(index); //Creates node to select a w300 tag in the doc based off the previous stated index  
            String question = (node.getFirstChild().getNodeValue()); //Stores the value of the w300 element in a String question 
            questionBox.setText(question); //Sets the referenced question from the XML file to the questionBox 
            
            //Catch loops to avoid errors
            } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
            } catch (IOException ioe) {
		ioe.printStackTrace();
            } catch (SAXException sae) {
		sae.printStackTrace();
            }
        
        try { //Try the following code 
            
            String filepath = "answers.xml"; //Sets the file path to answers.xml 
            
            //Uses document methods to open the document 
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);
            
            
            Node node = doc.getElementsByTagName("w300").item(index); //Creates node to select a w300 tag in the doc based off the previous stated index   
            String answer = (node.getFirstChild().getNodeValue()); //Stores the value of the w300 element in a String answer  
            hiddenAnswerBox.setText(answer); //Sets the referenced answer from the XML file to the hiddenAnswerBox  
            
            //Catch loops to avoid errors
            } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
            } catch (IOException ioe) {
		ioe.printStackTrace();
            } catch (SAXException sae) {
		sae.printStackTrace();
            }
      }
    }//GEN-LAST:event_w300ActionPerformed

    
    private void c300ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c300ActionPerformed
    //Code explained in w300ActionPerformed section. Referenced element is changed to c300 
        
    if(questionSelection == true){
        questionSelection = false;
        questionsLeft = questionsLeft - 1;
        c300.setEnabled(false);
        hiddenPointsBox.setText("300");
        int index = (int)(Math.random()* 4);
        
        try {
            String filepath = "questions.xml";
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);
            
            
            Node node = doc.getElementsByTagName("c300").item(index);  
            String question = (node.getFirstChild().getNodeValue());   
            questionBox.setText(question);
            
            } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
            } catch (IOException ioe) {
		ioe.printStackTrace();
            } catch (SAXException sae) {
		sae.printStackTrace();
            }
        
        try {
            
            String filepath = "answers.xml";
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);
            
            Node node = doc.getElementsByTagName("c300").item(index);  
            String answer = (node.getFirstChild().getNodeValue());   
            hiddenAnswerBox.setText(answer);
            
            } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
            } catch (IOException ioe) {
		ioe.printStackTrace();
            } catch (SAXException sae) {
		sae.printStackTrace();
            }
      }
    }//GEN-LAST:event_c300ActionPerformed

    private void h300ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_h300ActionPerformed
    //Code explained in w300ActionPerformed section. Referenced element is changed to h300 
        
    if(questionSelection == true){
        questionSelection = false;
        questionsLeft = questionsLeft - 1;
        h300.setEnabled(false);
        hiddenPointsBox.setText("300");
        int index = (int)(Math.random()* 4);
        
        try {
            String filepath = "questions.xml";
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);
            
            
            Node node = doc.getElementsByTagName("h300").item(index);  
            String question = (node.getFirstChild().getNodeValue());   
            questionBox.setText(question);
            
            } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
            } catch (IOException ioe) {
		ioe.printStackTrace();
            } catch (SAXException sae) {
		sae.printStackTrace();
            }
        
        try {
            
            String filepath = "answers.xml";
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);
            
            Node node = doc.getElementsByTagName("h300").item(index);  
            String answer = (node.getFirstChild().getNodeValue());   
            hiddenAnswerBox.setText(answer);
            
            } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
            } catch (IOException ioe) {
		ioe.printStackTrace();
            } catch (SAXException sae) {
		sae.printStackTrace();
            }
      }
    }//GEN-LAST:event_h300ActionPerformed

    private void w100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_w100ActionPerformed
    //Code explained in w300ActionPerformed section. Referenced element is changed to w100, hiddenPoints box set to 100   
        
        
    if(questionSelection == true){
        questionSelection = false;
        questionsLeft = questionsLeft - 1;
        w100.setEnabled(false);
        hiddenPointsBox.setText("100");
        int index = (int)(Math.random()* 4);
        
        try {
            String filepath = "questions.xml";
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);
            
            
            Node node = doc.getElementsByTagName("w100").item(index);  
            String question = (node.getFirstChild().getNodeValue());   
            questionBox.setText(question);
            
            } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
            } catch (IOException ioe) {
		ioe.printStackTrace();
            } catch (SAXException sae) {
		sae.printStackTrace();
            }
        
        try {
            
            String filepath = "answers.xml";
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);
            
            Node node = doc.getElementsByTagName("w100").item(index);  
            String answer = (node.getFirstChild().getNodeValue());   
            hiddenAnswerBox.setText(answer);
            
            } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
            } catch (IOException ioe) {
		ioe.printStackTrace();
            } catch (SAXException sae) {
		sae.printStackTrace();
            }
      }
      
    }//GEN-LAST:event_w100ActionPerformed

    private void c100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c100ActionPerformed
    //Code explained in w300ActionPerformed section. Referenced element is changed to c100, hiddenPoints box set to 100
        
        
    if(questionSelection == true){
        questionSelection = false;
        questionsLeft = questionsLeft - 1;
        c100.setEnabled(false);
        hiddenPointsBox.setText("100");
        int index = (int)(Math.random()* 4);
        
        try {
            String filepath = "questions.xml";
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);
            
            
            Node node = doc.getElementsByTagName("c100").item(index);  
            String question = (node.getFirstChild().getNodeValue());   
            questionBox.setText(question);
            
            } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
            } catch (IOException ioe) {
		ioe.printStackTrace();
            } catch (SAXException sae) {
		sae.printStackTrace();
            }
        
        try {
            
            String filepath = "answers.xml";
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);
            
            Node node = doc.getElementsByTagName("c100").item(index);  
            String answer = (node.getFirstChild().getNodeValue());   
            hiddenAnswerBox.setText(answer);
            
            } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
            } catch (IOException ioe) {
		ioe.printStackTrace();
            } catch (SAXException sae) {
		sae.printStackTrace();
            }
      }
    }//GEN-LAST:event_c100ActionPerformed

    private void h100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_h100ActionPerformed
    //Code explained in w300ActionPerformed section. Referenced element is changed to h100, hiddenPoints box set to 100
    
    
    if(questionSelection == true){
        questionSelection = false;
        questionsLeft = questionsLeft - 1;
        h100.setEnabled(false);
        hiddenPointsBox.setText("100");
        int index = (int)(Math.random()* 4);
        
        try {
            String filepath = "questions.xml";
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);
            
            
            Node node = doc.getElementsByTagName("h100").item(index);  
            String question = (node.getFirstChild().getNodeValue());   
            questionBox.setText(question);
            
            } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
            } catch (IOException ioe) {
		ioe.printStackTrace();
            } catch (SAXException sae) {
		sae.printStackTrace();
            }
        
        try {
            
            String filepath = "answers.xml";
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);
            
            Node node = doc.getElementsByTagName("h100").item(index);  
            String answer = (node.getFirstChild().getNodeValue());   
            hiddenAnswerBox.setText(answer);
            
            } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
            } catch (IOException ioe) {
		ioe.printStackTrace();
            } catch (SAXException sae) {
		sae.printStackTrace();
            }
      }
    }//GEN-LAST:event_h100ActionPerformed

    private void w200ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_w200ActionPerformed
    //Code explained in w300ActionPerformed section. Referenced element is changed to w200, hiddenPoints box set to 200
        
        
    if(questionSelection == true){
        questionSelection = false;
        questionsLeft = questionsLeft - 1;
        w200.setEnabled(false);
        hiddenPointsBox.setText("200");
        int index = (int)(Math.random()* 4);
        
        try {
            String filepath = "questions.xml";
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);
            
            
            Node node = doc.getElementsByTagName("w200").item(index);  
            String question = (node.getFirstChild().getNodeValue());   
            questionBox.setText(question);
            
            } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
            } catch (IOException ioe) {
		ioe.printStackTrace();
            } catch (SAXException sae) {
		sae.printStackTrace();
            }
        
        try {
            
            String filepath = "answers.xml";
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);
            
            Node node = doc.getElementsByTagName("w200").item(index);  
            String answer = (node.getFirstChild().getNodeValue());   
            hiddenAnswerBox.setText(answer);
            
            } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
            } catch (IOException ioe) {
		ioe.printStackTrace();
            } catch (SAXException sae) {
		sae.printStackTrace();
            }
      }
    }//GEN-LAST:event_w200ActionPerformed

    private void c200ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c200ActionPerformed
    //Code explained in w300ActionPerformed section. Referenced element is changed to c200, hiddenPoints box set to 200
        
    
    
    if(questionSelection == true){
        questionSelection = false;
        questionsLeft = questionsLeft - 1;
        c200.setEnabled(false);
        hiddenPointsBox.setText("200");
        int index = (int)(Math.random()* 4);
        
        try {
            String filepath = "questions.xml";
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);
            
            
            Node node = doc.getElementsByTagName("c200").item(index);  
            String question = (node.getFirstChild().getNodeValue());   
            questionBox.setText(question);
            
            } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
            } catch (IOException ioe) {
		ioe.printStackTrace();
            } catch (SAXException sae) {
		sae.printStackTrace();
            }
        
        try {
            
            String filepath = "answers.xml";
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);
            
            Node node = doc.getElementsByTagName("c200").item(index);  
            String answer = (node.getFirstChild().getNodeValue());   
            hiddenAnswerBox.setText(answer);
            
            } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
            } catch (IOException ioe) {
		ioe.printStackTrace();
            } catch (SAXException sae) {
		sae.printStackTrace();
            }
      }
    }//GEN-LAST:event_c200ActionPerformed

    private void h200ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_h200ActionPerformed
    //Code explained in w300ActionPerformed section. Referenced element is changed to h200, hiddenPoints box set to 200
        
        
    if(questionSelection == true){
        questionSelection = false;
        questionsLeft = questionsLeft - 1;
        h200.setEnabled(false);
        hiddenPointsBox.setText("200");
        int index = (int)(Math.random()* 4);
        
        try {
            String filepath = "questions.xml";
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);
            
            
            Node node = doc.getElementsByTagName("h200").item(index);  
            String question = (node.getFirstChild().getNodeValue());   
            questionBox.setText(question);
            
            } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
            } catch (IOException ioe) {
		ioe.printStackTrace();
            } catch (SAXException sae) {
		sae.printStackTrace();
            }
        
        try {
            
            String filepath = "answers.xml";
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(filepath);
            
            Node node = doc.getElementsByTagName("h200").item(index);  
            String answer = (node.getFirstChild().getNodeValue());   
            hiddenAnswerBox.setText(answer);
            
            } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
            } catch (IOException ioe) {
		ioe.printStackTrace();
            } catch (SAXException sae) {
		sae.printStackTrace();
            }
      }
    }//GEN-LAST:event_h200ActionPerformed

    private void exitGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitGameButtonActionPerformed
    if (gameStart == false){ //If gamestart is false, the following code executes 
        System.exit(0); //System closes 
    }else{ //Else, if gamestart is not false, the following code executes
        endGame(); //Endgame method executes to formally end the game
    }
    }//GEN-LAST:event_exitGameButtonActionPerformed

    private void endGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endGameButtonActionPerformed
        endGame(); //Executes endgame method 
    }//GEN-LAST:event_endGameButtonActionPerformed

    public void endGame(){ //Endgame method [Selection Sorting] 
        for (int i = 0; i < teams.size() - 1; i++){  // the first for loop will grab the first number in the array
            for (int j=i+1; j < teams.size(); j++) {  // the 2nd loop will grab the next number in the loop so we can compare two numbers
                if (teams.get(i) < teams.get(j)) {  // we are comparing two side by side array sets. The first time this runs, it will be comparing array index 0 to 1. if true swap them
                    int iVal = teams.get(i) ; //create a temp variable called iVal so we can temporary hold the team[i] array to make a swap later
                    teams.set(i, teams.get(j)); //Sets team(i) to value of team(j)
                    teams.set(j, iVal); //Sets team(j) to value of iVal 
                    String iValNumber = teamNumbers.get(i); //Creates temp variable called iValNumber to temporary hold the teamNumber[i] array to make a swap later
                    teamNumbers.set(i, teamNumbers.get(j)); //Sets team(i) to value of team(j)
                    teamNumbers.set(j, iValNumber); //Sets team(j) to value of iValNumber 
                }
            }
        }
        ImageIcon endscreen = new ImageIcon("src/TheGame/endscreen.png"); //Sets image endscreen to the following filepath
        String teamsDisplay = ""; //Creates new blank string TeamDisplay 
        for (int i =0; i < teams.size(); i++){ //A for loop that repeats for every item in the team Arraylist
            teamsDisplay = teamsDisplay.concat((i+1) + ". Team " + teamNumbers.get(i) + " - " + teams.get(i) + " points \n"); //teamDisplay string is appended with values from Team and TeamNumber arraylist for a repeated amount of times via the concat method   
        }
        JOptionPane.showMessageDialog(null, teamsDisplay , "Chemistry Jeopardy", JOptionPane.PLAIN_MESSAGE, endscreen); //JOptionpane appears as end screen with teamsDisplay string and endscreen Image
        System.exit(0); //All systems exit 
    }
    
    
    
    private void answerBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_answerBoxActionPerformed

    
    
    
    
    public static void main(String args[]) throws ParserConfigurationException, SAXException, IOException {
        
        
        /*
        Following comment was used to create and edit XML database
        All code done by Somesh Karthi 
        ___________________________________________________________________________________
        
        try {  //this trys to catch any expections in the code
 
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();   //this allows for the creation of the XML file
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();  //enables information to read from XML file 
 
		
		Document doc = docBuilder.newDocument();
                
		Element rootElement = doc.createElement("Jeopardy");  //calls the root element in the XML "Class"
		doc.appendChild(rootElement);

		Element questionSet1 = doc.createElement("Answers");
		rootElement.appendChild(questionSet1);

		Element w100question1 = doc.createElement("w100");
		w100question1.appendChild(doc.createTextNode("Sodium chloride"));
		questionSet1.appendChild(w100question1);
  
		Element w200question1 = doc.createElement("w200");
		w200question1.appendChild(doc.createTextNode("Carbon tetroxide"));
		questionSet1.appendChild(w200question1);
                
		Element w300question1 = doc.createElement("w300");
		w300question1.appendChild(doc.createTextNode("Dinitrogen tetroxide"));
		questionSet1.appendChild(w300question1);
                
                Element c100question1 = doc.createElement("c100");
		c100question1.appendChild(doc.createTextNode("MgCl2"));
		questionSet1.appendChild(c100question1);
                
                Element c200question1 = doc.createElement("c200");
		c200question1.appendChild(doc.createTextNode("NH3"));
		questionSet1.appendChild(c200question1);
                
                Element c300question1 = doc.createElement("c300");
		c300question1.appendChild(doc.createTextNode("Na2SO4"));
		questionSet1.appendChild(c300question1);
                
                Element h100question1 = doc.createElement("h100");
		h100question1.appendChild(doc.createTextNode("Niels Bohr"));
		questionSet1.appendChild(h100question1);
                
                Element h200question1 = doc.createElement("h200");
		h200question1.appendChild(doc.createTextNode("J.J. Thomson"));
		questionSet1.appendChild(h200question1);
                
                Element h300question1 = doc.createElement("h300");
		h300question1.appendChild(doc.createTextNode("James Chadwick"));
		questionSet1.appendChild(h300question1);
                
                
                
                Element questionSet2 = doc.createElement("Answers");
		rootElement.appendChild(questionSet2);
                
                Element w100question2 = doc.createElement("w100");
		w100question2.appendChild(doc.createTextNode("Potassium chloride"));
		questionSet2.appendChild(w100question2);
                
                Element w200question2 = doc.createElement("w200");
		w200question2.appendChild(doc.createTextNode("Barium fluoride"));
		questionSet2.appendChild(w200question2);
                
                Element w300question2 = doc.createElement("w300");
		w300question2.appendChild(doc.createTextNode("Hydrogen acetate"));
		questionSet2.appendChild(w300question2);
                
                Element c100question2 = doc.createElement("c100");
		c100question2.appendChild(doc.createTextNode("BaSe"));
		questionSet2.appendChild(c100question2);
                
                Element c200question2 = doc.createElement("c200");
		c200question2.appendChild(doc.createTextNode("CuF"));
		questionSet2.appendChild(c200question2);
                
                Element c300question2 = doc.createElement("c300");
		c300question2.appendChild(doc.createTextNode("SnO"));
		questionSet2.appendChild(c300question2);
                
                Element h100question2 = doc.createElement("h100");
		h100question2.appendChild(doc.createTextNode("Ernest Rutherford"));
		questionSet2.appendChild(h100question2);
                
                Element h200question2 = doc.createElement("h200");
		h200question2.appendChild(doc.createTextNode("Niels Bohr"));
		questionSet2.appendChild(h200question2);
                
                Element h300question2 = doc.createElement("h300");
		h300question2.appendChild(doc.createTextNode("Erwin Schrodinger"));
		questionSet2.appendChild(h300question2);
                
                
                
                Element questionSet3 = doc.createElement("Answers");
		rootElement.appendChild(questionSet3);
                
                Element w100question3 = doc.createElement("w100");
		w100question3.appendChild(doc.createTextNode("Carbon dioxide"));
		questionSet3.appendChild(w100question3);
                
                Element w200question3 = doc.createElement("w200");
		w200question3.appendChild(doc.createTextNode("Sodium chlorate"));
		questionSet3.appendChild(w200question3);
                
                Element w300question3 = doc.createElement("w300");
		w300question3.appendChild(doc.createTextNode("Ammonium hydroxide"));
		questionSet3.appendChild(w300question3);
                
                Element c100question3 = doc.createElement("c100");
		c100question3.appendChild(doc.createTextNode("AgBr"));
		questionSet3.appendChild(c100question3);
                
                Element c200question3 = doc.createElement("c200");
		c200question3.appendChild(doc.createTextNode("AgNO3"));
		questionSet3.appendChild(c200question3);
                
                Element c300question3 = doc.createElement("c300");
		c300question3.appendChild(doc.createTextNode("NaMnO4"));
		questionSet3.appendChild(c300question3);
		
                Element h100question3 = doc.createElement("h100");
		h100question3.appendChild(doc.createTextNode("John Dalton"));
		questionSet3.appendChild(h100question3);
                
                Element h200question3 = doc.createElement("h200");
		h200question3.appendChild(doc.createTextNode("Corpuscles"));
		questionSet3.appendChild(h200question3);
                
                Element h300question3 = doc.createElement("h300");
		h300question3.appendChild(doc.createTextNode("Niels Bohr"));
		questionSet3.appendChild(h300question3);
                
                
                
                Element questionSet4 = doc.createElement("Answers");
		rootElement.appendChild(questionSet4);
                
                Element w100question4 = doc.createElement("w100");
		w100question4.appendChild(doc.createTextNode("Water"));
		questionSet4.appendChild(w100question4);
                
                Element w200question4 = doc.createElement("w200");
		w200question4.appendChild(doc.createTextNode("Beryllium chromate"));
		questionSet4.appendChild(w200question4);
                
                Element w300question4 = doc.createElement("w300");
		w300question4.appendChild(doc.createTextNode("Potassium permanganate"));
		questionSet4.appendChild(w300question4);
                
                Element c100question4 = doc.createElement("c100");
		c100question4.appendChild(doc.createTextNode("LiOH"));
		questionSet4.appendChild(c100question4);
                
                Element c200question4 = doc.createElement("c200");
		c200question4.appendChild(doc.createTextNode("FeCrO4"));
		questionSet4.appendChild(c200question4);
                
                Element c300question4 = doc.createElement("c300");
		c300question4.appendChild(doc.createTextNode("Fe(C2H3O2)2"));
		questionSet4.appendChild(c300question4);
                
                Element h100question4 = doc.createElement("h100");
		h100question4.appendChild(doc.createTextNode("J.J. Thomson"));
		questionSet4.appendChild(h100question4);
                
                Element h200question4 = doc.createElement("h200");
		h200question4.appendChild(doc.createTextNode("Ernest Rutherford"));
		questionSet4.appendChild(h200question4);
                
                Element h300question4 = doc.createElement("h300");
		h300question4.appendChild(doc.createTextNode("Democritus"));
		questionSet4.appendChild(h300question4);
              
                
		// write the content into xml file
                
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
                
		Transformer transformer = transformerFactory.newTransformer();
                
		DOMSource source = new DOMSource(doc);
                transformer.setOutputProperty(OutputKeys.INDENT, "yes");   //makes sure the XML file is formatted nicely with indentation
                transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");  //makes sure the XML file is formatted nicely with indent space of 4 
		StreamResult result = new StreamResult(new File("answers.xml"));  //creates the file called output
 
		// Output to console screen  for testing, but you need to comment-out the previous "StreamResult result" line above. 
		//StreamResult result = new StreamResult(System.out);
 
		transformer.transform(source, result);
 
		System.out.println("File Saved In Project Directory");  //outputs to console "File Saved!"
 
            } catch (ParserConfigurationException pce) {   //trys to catch any exceptions
		pce.printStackTrace();
            } catch (TransformerException tfe) {
		tfe.printStackTrace();
            }
        
        
        try {
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();   //this allows for the creation of the XML file
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();  //enables information to read from XML file 
            Document doc = docBuilder.newDocument();
      
                Element rootElement = doc.createElement("Jeopardy");  //calls the root element in the XML "Class"
		doc.appendChild(rootElement);

		Element questionSet1 = doc.createElement("Questions");
		rootElement.appendChild(questionSet1);

		Element w100question1 = doc.createElement("w100");
		w100question1.appendChild(doc.createTextNode("What is NaCl in words?"));
		questionSet1.appendChild(w100question1);
  
		Element w200question1 = doc.createElement("w200");
		w200question1.appendChild(doc.createTextNode("What is CO4 in words?"));
		questionSet1.appendChild(w200question1);
                
		Element w300question1 = doc.createElement("w300");
		w300question1.appendChild(doc.createTextNode("What is N2O4 in words?"));
		questionSet1.appendChild(w300question1);
                
                Element c100question1 = doc.createElement("c100");
		c100question1.appendChild(doc.createTextNode("What is chemical formula for Magnesium Chloride?"));
		questionSet1.appendChild(c100question1);
                
                Element c200question1 = doc.createElement("c200");
		c200question1.appendChild(doc.createTextNode("What is the chemical formula for Ammonia?"));
		questionSet1.appendChild(c200question1);
                
                Element c300question1 = doc.createElement("c300");
		c300question1.appendChild(doc.createTextNode("What is the chemical formula for Sodium Sulfate?"));
		questionSet1.appendChild(c300question1);
                
                Element h100question1 = doc.createElement("h100");
		h100question1.appendChild(doc.createTextNode("Who created the bohr model?"));
		questionSet1.appendChild(h100question1);
                
                Element h200question1 = doc.createElement("h200");
		h200question1.appendChild(doc.createTextNode("Who created the plum pudding model?"));
		questionSet1.appendChild(h200question1);
                
                Element h300question1 = doc.createElement("h300");
		h300question1.appendChild(doc.createTextNode("Who discovered the neutron?"));
		questionSet1.appendChild(h300question1);
                
                
                
                Element questionSet2 = doc.createElement("Questions");
		rootElement.appendChild(questionSet2);
                
                Element w100question2 = doc.createElement("w100");
		w100question2.appendChild(doc.createTextNode("What is KCl in words?"));
		questionSet2.appendChild(w100question2);
                
                Element w200question2 = doc.createElement("w200");
		w200question2.appendChild(doc.createTextNode("What is BaF2 in words?"));
		questionSet2.appendChild(w200question2);
                
                Element w300question2 = doc.createElement("w300");
		w300question2.appendChild(doc.createTextNode("What is HC2H3O2 in words?"));
		questionSet2.appendChild(w300question2);
                
                Element c100question2 = doc.createElement("c100");
		c100question2.appendChild(doc.createTextNode("What is the chemical formula for Barium selenide?"));
		questionSet2.appendChild(c100question2);
                
                Element c200question2 = doc.createElement("c200");
		c200question2.appendChild(doc.createTextNode("What is the chemical formula for Copper (I) fluoride?"));
		questionSet2.appendChild(c200question2);
                
                Element c300question2 = doc.createElement("c300");
		c300question2.appendChild(doc.createTextNode("What is the formula for Tin (II) oxide?"));
		questionSet2.appendChild(c300question2);
                
                Element h100question2 = doc.createElement("h100");
		h100question2.appendChild(doc.createTextNode("Who discovered the nucleus?"));
		questionSet2.appendChild(h100question2);
                
                Element h200question2 = doc.createElement("h200");
		h200question2.appendChild(doc.createTextNode("Who discovered that atoms have shells?"));
		questionSet2.appendChild(h200question2);
                
                Element h300question2 = doc.createElement("h300");
		h300question2.appendChild(doc.createTextNode("Who discovered the electron cloud model?"));
		questionSet2.appendChild(h300question2);
            
                Element questionSet3 = doc.createElement("Questions");
		rootElement.appendChild(questionSet3);
                
                Element w100question3 = doc.createElement("w100");
		w100question3.appendChild(doc.createTextNode("What is CO2 in words?"));
		questionSet3.appendChild(w100question3);
                
                Element w200question3 = doc.createElement("w200");
		w200question3.appendChild(doc.createTextNode("What is NaClO3 in words?"));
		questionSet3.appendChild(w200question3);
                
                Element w300question3 = doc.createElement("w300");
		w300question3.appendChild(doc.createTextNode("What is NH4OH in words?"));
		questionSet3.appendChild(w300question3);
                
                Element c100question3 = doc.createElement("c100");
		c100question3.appendChild(doc.createTextNode("What is the chemical formula of Silver bromide?"));
		questionSet3.appendChild(c100question3);
                
                Element c200question3 = doc.createElement("c200");
		c200question3.appendChild(doc.createTextNode("What is the chemical formula of Silver nitrate?"));
		questionSet3.appendChild(c200question3);
                
                Element c300question3 = doc.createElement("c300");
		c300question3.appendChild(doc.createTextNode("What is the chemical formula of Sodium permanganate?"));
		questionSet3.appendChild(c300question3);
		
                Element h100question3 = doc.createElement("h100");
		h100question3.appendChild(doc.createTextNode("Who discovered the billiard ball model?"));
		questionSet3.appendChild(h100question3);
                
                Element h200question3 = doc.createElement("h200");
		h200question3.appendChild(doc.createTextNode("What were electrons originally called?"));
		questionSet3.appendChild(h200question3);
                
                Element h300question3 = doc.createElement("h300");
		h300question3.appendChild(doc.createTextNode("Who discovered that electrons can jump to higher orbits?"));
		questionSet3.appendChild(h300question3);
                
                
                Element questionSet4 = doc.createElement("Questions");
		rootElement.appendChild(questionSet4);
                
                Element w100question4 = doc.createElement("w100");
		w100question4.appendChild(doc.createTextNode("What is the common name of H2O?"));
		questionSet4.appendChild(w100question4);
                
                Element w200question4 = doc.createElement("w200");
		w200question4.appendChild(doc.createTextNode("What is the name of BeCrO4?"));
		questionSet4.appendChild(w200question4);
                
                Element w300question4 = doc.createElement("w300");
		w300question4.appendChild(doc.createTextNode("What is the name of KMnO4?"));
		questionSet4.appendChild(w300question4);
                
                Element c100question4 = doc.createElement("c100");
		c100question4.appendChild(doc.createTextNode("What is the chemical formula of Lithium hydroxide?"));
		questionSet4.appendChild(c100question4);
                
                Element c200question4 = doc.createElement("c200");
		c200question4.appendChild(doc.createTextNode("What is the chemical formula of Iron (II) chromate?"));
		questionSet4.appendChild(c200question4);
            
                Element c300question4 = doc.createElement("c300");
		c300question4.appendChild(doc.createTextNode("What is the chemical formula of Iron(II) Acetate"));
		questionSet4.appendChild(c300question4);
                
                Element h100question4 = doc.createElement("h100");
		h100question4.appendChild(doc.createTextNode("Who believed that electrons were like raisins in a pudding?"));
		questionSet4.appendChild(h100question4);
                
                Element h200question4 = doc.createElement("h200");
		h200question4.appendChild(doc.createTextNode("Who conducted the gold foil experiment?"));
		questionSet4.appendChild(h200question4);
                
                Element h300question4 = doc.createElement("h300");
		h300question4.appendChild(doc.createTextNode("Who first discovered atoms?"));
		questionSet4.appendChild(h300question4);

	        // write the content into xml file
                
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
                
		Transformer transformer = transformerFactory.newTransformer();
                
		DOMSource source = new DOMSource(doc);
                transformer.setOutputProperty(OutputKeys.INDENT, "yes");   //makes sure the XML file is formatted nicely with indentation
                transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");  //makes sure the XML file is formatted nicely with indent space of 4 
		StreamResult result = new StreamResult(new File("questions.xml"));  //creates the file called output
 
		// Output to console screen  for testing, but you need to comment-out the previous "StreamResult result" line above. 
		//StreamResult result = new StreamResult(System.out);
 
		transformer.transform(source, result);
 
		System.out.println("File Saved In Project Directory");  //outputs to console "File Saved!"
 
	 } catch (ParserConfigurationException pce) {   //trys to catch any exceptions
		pce.printStackTrace();
	  } catch (TransformerException tfe) {
		tfe.printStackTrace();
	  }
        */
        
        //Runs main program 
        java.awt.EventQueue.invokeLater(new Runnable() { 
            public void run() {
                new TheGame().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField answerBox;
    private javax.swing.JButton c100;
    private javax.swing.JButton c200;
    private javax.swing.JButton c300;
    private javax.swing.JButton confirmButton;
    private javax.swing.JTextField currentTeam;
    private javax.swing.JButton endGameButton;
    private javax.swing.JButton exitGameButton;
    private javax.swing.JLabel gameBoard;
    private javax.swing.JButton h100;
    private javax.swing.JButton h200;
    private javax.swing.JButton h300;
    private javax.swing.JTextField hiddenAnswerBox;
    private javax.swing.JTextField hiddenPointsBox;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel questionAnswerBoard;
    private javax.swing.JLabel questionAnswerBoard1;
    private javax.swing.JTextField questionBox;
    private javax.swing.JTextArea scoreBox;
    private javax.swing.JLabel teamsBoard;
    private javax.swing.JButton w100;
    private javax.swing.JButton w200;
    private javax.swing.JButton w300;
    // End of variables declaration//GEN-END:variables
}
